{"name":"Zipline","tagline":"Zipline, a Pythonic Algorithmic Trading Library","body":"Zipline\r\n=======\r\n\r\nZipline is a Pythonic algorithmic trading library.\r\nThe system is fundamentally event-driven and a close\r\napproximation of how live-trading systems operate.\r\nCurrently, backtesting is well supported, but the intent is\r\nto develop the library for both paper and live trading,\r\nso that the same logic used for backtesting can be applied\r\nto the market.\r\n\r\nZipline is currently used in production as the backtesting engine\r\npowering Quantopian (https://www.quantopian.com) -- a free, community-centered\r\nplatform that allows development and real-time backtesting of trading\r\nalgorithms in the web browser.\r\n\r\nWant to contribute? See our [open requests](https://github.com/quantopian/zipline/wiki/Contribution-Requests)\r\nand our [general guidelines](https://github.com/quantopian/zipline#contributions) below.\r\n\r\nDiscussion and Help\r\n===================\r\n\r\nDiscussion of the project is held at the Google Group,\r\n<zipline@googlegroups.com>,\r\n<https://groups.google.com/forum/#!forum/zipline>.\r\n\r\nFeatures\r\n========\r\n\r\n* Ease of use: Zipline tries to get out of your way so that you can\r\nfocus on algorithm development. See below for a code example.\r\n\r\n* Zipline comes \"batteries included\" as many common statistics like\r\nmoving average and linear regression can be readily accessed from\r\nwithin a user-written algorithm.\r\n\r\n* Input of historical data and output of performance statistics is\r\nbased on Pandas DataFrames to integrate nicely into the existing\r\nPython eco-system.\r\n\r\n* Statistic and machine learning libraries like matplotlib, scipy,\r\nstatsmodels, and sklearn support development, analysis and\r\nvisualization of state-of-the-art trading systems.\r\n\r\nInstallation\r\n============\r\n\r\nSince zipline is pure-python code it should be very easy to install\r\nand set up with pip:\r\n\r\n```pip install zipline```\r\n\r\nIf there are problems installing the dependencies or zipline we\r\nrecommend installing these packages via some other means. For Windows,\r\nthe [Enthought Python Distribution](http://www.enthought.com/products/epd.php)\r\nincludes most of the necessary dependencies. On OSX, the\r\n[Scipy Superpack](http://fonnesbeck.github.com/ScipySuperpack/)\r\nworks very well.\r\n\r\nDependencies\r\n------------\r\n\r\n* Python (>= 2.7.2)\r\n* numpy (>= 1.6.0)\r\n* pandas (>= 0.9.0)\r\n* pytz\r\n* msgpack-python\r\n* Logbook\r\n* blist\r\n\r\nQuickstart\r\n==========\r\n\r\nThe following code implements a simple dual moving average algorithm\r\nand tests it on data extracted from yahoo finance.\r\n\r\n```python\r\nfrom zipline.algorithm import TradingAlgorithm\r\nfrom zipline.transforms import MovingAverage\r\nfrom zipline.utils.factory import load_from_yahoo\r\n\r\nclass DualMovingAverage(TradingAlgorithm):\r\n    \"\"\"Dual Moving Average algorithm.\r\n    \"\"\"\r\n    def initialize(self, short_window=200, long_window=400):\r\n        # Add 2 mavg transforms, one with a long window, one\r\n        # with a short window.\r\n        self.add_transform(MovingAverage, 'short_mavg', ['price'],\r\n                           market_aware=True,\r\n                           window_length=short_window)\r\n\r\n        self.add_transform(MovingAverage, 'long_mavg', ['price'],\r\n                           market_aware=True,\r\n                           window_length=long_window)\r\n\r\n        # To keep track of whether we invested in the stock or not\r\n        self.invested = False\r\n\r\n        self.short_mavg = []\r\n        self.long_mavg = []\r\n\r\n\r\n    def handle_data(self, data):\r\n        if (data['AAPL'].short_mavg['price'] > data['AAPL'].long_mavg['price']) and not self.invested:\r\n            self.order('AAPL', 100)\r\n            self.invested = True\r\n        elif (data['AAPL'].short_mavg['price'] < data['AAPL'].long_mavg['price']) and self.invested:\r\n            self.order('AAPL', -100)\r\n            self.invested = False\r\n\r\n        # Save mavgs for later analysis.\r\n        self.short_mavg.append(data['AAPL'].short_mavg['price'])\r\n        self.long_mavg.append(data['AAPL'].long_mavg['price'])\r\n\r\ndata = load_from_yahoo()\r\ndma = DualMovingAverage()\r\nresults = dma.run(data)\r\n```\r\n\r\nYou can find other examples in the zipline/examples directory.\r\n\r\nContributions\r\n============\r\n\r\nIf you would like to contribute, please see our Contribution Requests: https://github.com/quantopian/zipline/wiki/Contribution-Requests\r\n\r\nCredits\r\n--------\r\nThank you for all the help so far!\r\n\r\n- @rday for sortino ratio, information ratio, and exponential moving average transform\r\n- @snth\r\n- @yinhm for integrating zipline with @yinhm/datafeed\r\n- [Jeremiah Lowin](http://www.lowindata.com) for teaching us the nuances of Sharpe and Sortino Ratios\r\n- Brian Cappello\r\n- Quantopian Team\r\n\r\n(alert us if we've inadvertantly missed listing you here!)\r\n\r\nStyle Guide\r\n------------\r\n\r\nTo ensure that changes and patches are focused on behavior changes,\r\nthe zipline codebase adheres to both PEP-8,\r\n<http://www.python.org/dev/peps/pep-0008/>, and pyflakes,\r\n<https://launchpad.net/pyflakes/>.\r\n\r\nThe maintainers check the code using the flake8 script,\r\n<https://github.com/bmcustodio/flake8>, which is included in the\r\nrequirements_dev.txt.\r\n\r\nBefore submitting patches or pull requests, please ensure that your\r\nchanges pass ```flake8 zipline tests```\r\n\r\n\r\nSource\r\n======\r\n\r\nThe source for Zipline is hosted at\r\n<https://github.com/quantopian/zipline>.\r\n\r\nBuild Status\r\n============\r\n\r\n[![Build Status](https://travis-ci.org/quantopian/zipline.png)](https://travis-ci.org/quantopian/zipline)\r\n\r\nContact\r\n=======\r\n\r\nFor other questions, please contact <opensource@quantopian.com>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}